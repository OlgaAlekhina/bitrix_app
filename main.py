import sys

from flask import Flask, request, jsonify
import requests
import logging

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[logging.StreamHandler(sys.stdout)]  # –¢–æ–ª—å–∫–æ –≤ –∫–æ–Ω—Å–æ–ª—å
)

logger = logging.getLogger(__name__)

app = Flask(__name__)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
BITRIX_WEBHOOK_URL = 'https://veleres.bitrix24.ru/rest/30/i2imc8wqu35pmdem/'
NOTIFY_USER_ID = '30'  # ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π


@app.route("/")
def hello():
    return "Timeweb Cloud + Flask = ‚ù§Ô∏è"


@app.route('/bitrix-webhook', methods=['POST'])
def handle_bitrix_webhook():
    """ –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–µ–±—Ö—É–∫–∞ –æ—Ç Bitrix24 """
    logger.info(f"Headers: {dict(request.headers)}")
    logger.info(f"Raw body: {request.data.decode('utf-8')}")

    try:
        if request.is_json:
            data = request.get_json()
        else:
            data = request.form.to_dict()

        logger.info(f"–ü–æ–ª—É—á–µ–Ω –≤–µ–±—Ö—É–∫: {data}")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø —Å–æ–±—ã—Ç–∏—è
        event = data.get('event', '')

        if event in ('ONCRMLEADADD', 'ONCRMLEADUPDATE'):
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –∏–ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ª–∏–¥–∞
            lead_id = data['data[FIELDS][ID]']
            logger.info(f"–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ª–∏–¥ —Å ID: {lead_id}")

            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ª–∏–¥–∞
            lead_data = get_lead_data(lead_id)

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–∏—Å—Ç–µ–º–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –º–Ω–µ –≤ –ë–∏—Ç—Ä–∏–∫—Å
            result = send_notification(lead_data)

            return jsonify({'status': 'success', 'send_message': result})

        else:
            logger.warning(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ: {event}")
            return jsonify({'status': 'ignored', 'event': event})

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–µ–±—Ö—É–∫–∞: {str(e)}")
        return jsonify({'error': str(e)}), 500

def get_lead_data(lead_id):
    """
    –ü–æ–ª—É—á–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –ª–∏–¥–∞ –ø–æ ID
    """
    try:
        response = requests.post(
            f'{BITRIX_WEBHOOK_URL}crm.lead.get',
            json={'id': lead_id}
        )

        if response.status_code == 200:
            return response.json().get('result', {})
        else:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–¥–µ–ª–∫–∏: {response.status_code}")
            return None

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ —Å–¥–µ–ª–∫–∏: {str(e)}")
        return None

def send_notification(lead_data):
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ Bitrix24
    """
    try:
        id = lead_data.get('ID')
        title = lead_data.get('TITLE')
        name = lead_data.get('NAME')
        second_name = lead_data.get('SECOND_NAME')
        last_name = lead_data.get('LAST_NAME')
        company = lead_data.get('COMPANY_TITLE')
        returned = lead_data.get('IS_RETURN_CUSTOMER')
        source = lead_data.get('SOURCE_DESCRIPTION')
        comments = lead_data.get('COMMENTS')
        # message = f"""
        # üîî –ü–û–í–¢–û–†–ù–´–ô –ó–í–û–ù–û–ö –ù–ê –î–†–£–ì–û–ô –ù–û–ú–ï–†
        #
        # üìû –¢–µ–ª–µ—Ñ–æ–Ω –∫–ª–∏–µ–Ω—Ç–∞: {phone}
        # üî¢ –ü—Ä–µ–¥—ã–¥—É—â–∏–π –Ω–æ–º–µ—Ä: {prev_number}
        # üî¢ –¢–µ–∫—É—â–∏–π –Ω–æ–º–µ—Ä: {current_number}
        # ‚è∞ –í—Ä–µ–º—è: {datetime.now().strftime('%Y-%m-%d %H:%M')}
        #
        # üìã –°—Å—ã–ª–∫–∞ –Ω–∞ —Å–¥–µ–ª–∫—É: https://your-company.bitrix24.ru/crm/deal/details/{deal_id}/
        #
        # üö® –ö–ª–∏–µ–Ω—Ç –∑–≤–æ–Ω–∏–ª –Ω–∞ —Ä–∞–∑–Ω—ã–µ –Ω–æ–º–µ—Ä–∞! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ –¥—É–±–ª–∏–∫–∞—Ç—ã.
        # """

        message = f""" 
        –°–æ–∑–¥–∞–Ω –ª–∏–¥: 
        ID - {id}
        –ù–∞–∑–≤–∞–Ω–∏–µ - {title if title else '–Ω–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏'}
        –ò–º—è - {name if name else '–Ω–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏'}
        –û—Ç—á–µ—Å—Ç–≤–æ - {second_name if second_name else '–Ω–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏'}
        –§–∞–º–∏–ª–∏—è - {last_name if last_name else '–Ω–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏'}
        –ö–æ–º–ø–∞–Ω–∏—è - {company if company else '–Ω–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏'}
        –ü–æ–≤—Ç–æ—Ä–Ω—ã–π - {'–ù–ï–¢' if returned == 'N' else '–î–ê'}
        –ò—Å—Ç–æ—á–Ω–∏–∫ - {source if source else '–Ω–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏'}
        –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ - {comments if comments else '–Ω–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏'}
        """

        response = requests.post(
            f'{BITRIX_WEBHOOK_URL}im.notify.system.add',
            json={
                'USER_ID': NOTIFY_USER_ID,
                'message': message
            }
        )

        logger.info(f"–û—Ç–≤–µ—Ç Bitrix24: {response.status_code} - {response.text}")
        logger.info(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –¥–ª—è –ª–∏–¥–∞ {id}")
        return 'success'

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {str(e)}")
        return f'error: {str(e)}'

@app.route('/hello-flask', methods=['GET'])
def hello_flask():
    return 'Hello Flask!'


if __name__ == "__main__":
    port = 8000
    app.run(debug=True,host='0.0.0.0',port=port)